#!/usr/bin/env bash

touch ${INSTALL_DIR}.env
if [ $? -ne 0 ]; then
    echo "Failed to touch the .env file. Please check the permissions."
    exit 1
fi

if [ "${EE_GITLAB_WEB_DOCKER_DEPLOY_TOKEN:-optional_not_set}" != "optional_not_set" ]; then
    echo "Logging in to gitlab.medelexis.ch"
    echo ${EE_GITLAB_WEB_DOCKER_DEPLOY_TOKEN#*:} | docker login -u ${EE_GITLAB_WEB_DOCKER_DEPLOY_TOKEN%:*} --password-stdin gitlab.medelexis.ch:4567
fi

pull_eenv-config
docker build -q -t ee-util ${INSTALL_DIR}docker/ee-util/.
PWD=$(pwd)
docker run --rm --env-file ${INSTALL_DIR}.env -v ${INSTALL_DIR}/docker/compose/assets/:/assets -v ${INSTALL_DIR}/site/:/site -v ${INSTALL_DIR}:/installdir -i ee-util /configure.sh $@

#
# Executed on the host system
# Calculate the resource usage
#

#
# FUNCTION DEFINITION
#
POSTGRES_CMD="docker exec -u postgres elexis-environment-postgres-1"
T="[POSTGRES] "
echo "$T $(date)"

assertKeycloakDatabase() {
    echo "$T Keycloak - Asserting database"

    X_EE_RDBMS_KEYCLOAK_PASSWORD=$(randomSecret)

    # Check if the user exists and create if not,  update the password
    KC_USER_EXISTS=$($POSTGRES_CMD psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='keycloak_user'")
    if [ "$KC_USER_EXISTS" != "1" ]; then
        echo "$T Keycloak - Creating keycloak user"
        $POSTGRES_CMD createuser keycloak_user
        echo "$T Keycloak - Creating keycloak user done"
    fi

    echo "$T Keycloak - Updating keycloak user password"
    $POSTGRES_CMD psql -c "ALTER USER keycloak_user WITH PASSWORD '${X_EE_RDBMS_KEYCLOAK_PASSWORD}';"
    echo "$T Keycloak - Updating keycloak user password done"

    # assert database exists
    DATABASE_EXISTS=$($POSTGRES_CMD psql -tAc "SELECT 1 FROM pg_database WHERE datname='keycloak'")
    # https://www.keycloak.org/server/db
    if [ "$DATABASE_EXISTS" != "1" ]; then
        echo "$T Keycloak - Creating keycloak database"
        $POSTGRES_CMD createdb --encoding=UTF8 --owner=keycloak_user keycloak
        echo "$T Keycloak - Creating keycloak database done"
    fi

    sed -i -e 's/\(X_EE_RDBMS_KEYCLOAK_PASSWORD=\).*$/\1'"${X_EE_RDBMS_KEYCLOAK_PASSWORD}"'/' ${INSTALL_DIR}.env
}

assertMatrixDatabase() {
    echo "$T Synapse - Asserting synapse database"

    SYNAPSE_USER_DATABASE_PASSWORD=$(randomSecret)

    # Check if the user exists and create if not,  update the password
    USER_EXISTS=$($POSTGRES_CMD psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='synapse_user'")
    if [ "$USER_EXISTS" != "1" ]; then
        echo "$T Synapse - Creating synapse user"
        $POSTGRES_CMD createuser synapse_user
        echo "$T Synapse - Creating synapse user done"
    fi

    echo "$T Synapse - Updating synapse user password"
    $POSTGRES_CMD psql -c "ALTER USER synapse_user WITH PASSWORD '${SYNAPSE_USER_DATABASE_PASSWORD}';"
    echo "$T Synapse - Updating synapse user password done"

    mkdir -p ${INSTALL_DIR}site/matrix/synapse
    echo $SYNAPSE_USER_DATABASE_PASSWORD >${INSTALL_DIR}site/matrix/synapse/postgres_password

    # assert database exists
    DATABASE_EXISTS=$($POSTGRES_CMD psql -tAc "SELECT 1 FROM pg_database WHERE datname='synapse'")
    # else createdb --encoding=UTF8 --locale=C --template=template0 --owner=synapse_user synapse
    if [ "$DATABASE_EXISTS" != "1" ]; then
        echo "$T Synapse - Creating synapse database"
        $POSTGRES_CMD createdb --encoding=UTF8 --locale=C --template=template0 --owner=synapse_user synapse
        echo "$T Synapse - Creating synapse database done"
    fi

    echo "$T Synapse - Asserting synapse database done"
}

assertGuacamoleDatabase() {
    echo "$T Guacamole - Asserting guacamole database"

    GUACAMOLE_USER_DATABASE_PASSWORD=$(randomSecret)

    # Check if the user exists and create if not,  update the password
    USER_EXISTS=$($POSTGRES_CMD psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='guacamole_user'")
    if [ "$USER_EXISTS" != "1" ]; then
        echo "$T Guacamole - Creating guacamole user"
        $POSTGRES_CMD createuser guacamole_user
        echo "$T Guacamole - Creating guacamole user done"
    fi

    echo "$T Guacamole - Updating guacamole user password"
    $POSTGRES_CMD psql -c "ALTER USER guacamole_user WITH PASSWORD '${GUACAMOLE_USER_DATABASE_PASSWORD}';"
    echo "$T Guacamole - Updating guacamole user password done"

    sed -i -e 's/\(X_EE_RDBMS_GUACAMOLE_PASSWORD=\).*$/\1'"${GUACAMOLE_USER_DATABASE_PASSWORD}"'/' ${INSTALL_DIR}.env

    # assert database exists
    DATABASE_EXISTS=$($POSTGRES_CMD psql -tAc "SELECT 1 FROM pg_database WHERE datname='guacamole_db'")
    if [ "$DATABASE_EXISTS" != "1" ]; then
        echo "$T Guacamole - Creating guacamole database"
        $POSTGRES_CMD createdb --encoding=UTF8 --owner=guacamole_user guacamole_db
        $POSTGRES_CMD psql -U guacamole_user -d guacamole_db -f /assets/guacamole-postgres-initdb-1.6.0.sql
        echo "$T Guacamole - Creating guacamole database done"
    fi
    
    echo "$T Guacamole - Asserting guacamole database done"
}

#
# Executed on the host system
#
echo "$T starting ..."

./ee system cmd up -d postgres

# Wait for postgres to be ready
until ./ee system cmd exec postgres pg_isready; do
    echo "$T Waiting ..."
    sleep 1
done

assertKeycloakDatabase
assertMatrixDatabase
assertGuacamoleDatabase

echo "$T stopping"
./ee system cmd stop postgres
